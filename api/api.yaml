openapi: 3.0.3
info:
  title: vcverifier
  description: Backend component to verify credentials
  version: 0.0.1
tags:
  - name: frontend
    description: All endpoints that belong to the frontend-application part
  - name: api
    description: All api-endpoints, e.g. the once that can be reused by other applicatios
  - name: verifier
    description: All endpoints belonging to the verifier functionality
paths:
  /verifier/api/v1/displayqr:
    get:
      tags:
        - verifier
        - frontend
      operationId: VerifierPageDisplayQRSIOP
      summary: Presents a qr as starting point for the auth process
      description: Returns a rendered html with a QR encoding the login-starting point for the siop flow - e.g. 'openid://?scope=somethign&response_type=rt&response_mode=rm&client_id=ci&redirect_uri=uri&state=state&nonce=nonce'
      responses:
        '200':
          description: A rendered page, containing the qr
          content:
            text/html:
              schema:
                type: object
  /verifier/api/v1/loginexpired:
    get:
      tags:
        - verifier
        - frontend
      operationId: VerifierPageLoginExpired
      summary: Presents a page when the login session is expired
      responses: 
        '200':
          description: A rendered page, showing the error message
          content:
            text/html:
              schema:
                type: object
  /verifier/api/v1/startsiopsamedevice:
    get:
      tags:
        - verifier
        - api
      parameters:
        - $ref: '#/components/parameters/QueryState'
      operationId: VerifierPageStartSIOPSameDevice
      summary: Starts the siop flow for credentials hold by the same device
      description: When the credential is already present in the requesting browser, the same-device flow can be used. It creates the login information and then redirects to the /authenticationresponse path.
      responses: 
        '302':
          description: A redirect to the authenticationresponse path, containing scope, response_type, client_id, redirect_uri, state and nonce to be used for the request
  /verifier/api/v1/receivecredential/{state}:
    get:
      tags:
        - verifier
        - frontend
      parameters:
        - $ref: '#/components/parameters/State'
      operationId: VerifierPageReceiveCredential
      summary: Presents a rendered page, showing the credential associated with the requested state
      responses:
        '200':
          description: A rendered page, showing the credential
          content:
            text/html:
              schema:
                type: object
  /verifier/api/v1/accessprotectedservice:
    get:
      tags:
        - verifier
        - frontend
      operationId: VerifierPageAccessProtectedService
      summary: Presents a rendered page, containing the response from the protected service
      description: When called, the vc connected to the current session is used to access the 'protected-service'. The response then is rendered into an html page.
      responses:
        '200':
          description: A rendered page, showing the response from the protected service
          content:
            text/html:
              schema:
                type: object
  /verifier/api/v1/poll/{state}:
    get:
      tags:
        - verifier
        - api
      parameters:
        - $ref: '#/components/parameters/State'
      operationId: VerifierAPIPoll
      summary: Endpoint to check the current state of a session
      responses:
        '200':
          description: Returns either the state of the session(pending, expired) or the credential itself
          content:
            text/plain:
              schema:
                type: string
  /verifier/api/v1/token/{state}:
    get:
      tags:
        - verifier
        - api
      parameters:
        - $ref: '#/components/parameters/State'
      operationId: VerifierAPIToken
      summary: Return the jwt for the requested session
      responses:
        '200':
          description: The access token
          content:
            text/plain:
              schema: 
                type: string
        '403':
          description: Unauthorized, in case the session is not authorized
  /verifier/api/v1/startsiop:
    get:
      tags:
        - verifier
        - api 
      parameters:
        - $ref: '#/components/parameters/QueryState'
      operationId: VerifierAPIStartSIOP
      summary: Initiates the siop flow and returns the 'openid://...' connection string
      responses:
        '200': 
          description: The connection string 
          content:
            text/plain:
              schema:
                type: string
                example: openid://?scope=dsba.credentials.presentation.PacketDeliveryService&response_type=vp_token&response_mode=post&client_id=did:key:z6MktZy7CErCqdLvknH6g9YNVpWupuBNBNovsBrj4DFGn4R1&redirect_uri=http://localhost:3000/verifier/api/v1/authenticationresponse&state=&nonce=BfEte4DFdlmdO7a_fBiXTw
  /verifier/api/v1/authenticationrequest:
    $ref: '#/paths/~1verifier~1api~1v1~1startsiop'
  /verifier/api/v1/authenticationresponse:
    post:
      tags:
        - verifier
        - api 
      parameters:
        - $ref: '#/components/parameters/QueryState'
      operationId: VerifierAPIAuthenticationResponse
      summary: Stores the credential for the given session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VCContainer'
      responses:
        '200':  
          description: Ok when it worked
          content:
            text/plain:
              schema:
                type: string
                enum: 
                  - "ok"
  /verifier/.well-known/jwks_uri:
    get: 
      tags:
        - verifier
        - api
      operationId: VerifierAPIJWKS
      summary: Provides the public keys for the given verifier, to be used for verifing the JWTs
      responses:
        '200': 
          description: The list of public keys, belonging to the issuer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSet'
  /:
    get: 
      tags:
        - base
        - frontend
      operationId: HandleHome
      summary: Returns the rendered index.page
      responses:
        '200':
          description: The home page
          content:
            text/plain:
              schema:
                type: object
  /verifier:
    get: 
      tags:
        - base
        - frontend
      operationId: HandleVerifierHome
      summary: Returns the rendered homepage for the verifier functionality
      responses:
        '200':
          description: The verifier page
          content:
            text/plain:
              schema:
                type: object
  /info:
    get: 
      tags:
        - base
        - api
      operationId: GetBackendInfo
      summary: Returns the issuer and verifier did, generated on startup
      responses:
        '200':
          description: Object containing the info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackendInfo'
                
components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      schema:
        type: string
        example: urn:uuid:274e7465-cc9d-4cad-b75f-190db927e56a
    State:
      name: state
      in: path
      required: true
      schema: 
        type: string
        example: 274e7465-cc9d-4cad-b75f-190db927e56a
    QueryState:
      name: state
      in: query
      required: true
      schema: 
        type: string
        example: 274e7465-cc9d-4cad-b75f-190db927e56a
    QueryId:
      name: id
      in: query
      required: true
      schema:
        type: string
        example: urn:uuid:274e7465-cc9d-4cad-b75f-190db927e56a
    RedirectUri:
      name: redirect_uri
      in: query
      required: true
      schema:
        type: string
        example: https://my-verifier.com/verifier/api/v1/authenticationresponse
  schemas:
    CredentialsType:
      type: array
      items:
        type: string
      example:
        - PacketDeliveryService
        - VerifiableCredential
    Did:
      type: object
      properties:
        id:
          type: string
          format: did
          example: did:key:z6Mks9m9ifLwy3JWqH4c57EbBQVS2SpRCjfa79wHb5vWM6vh
    Date:
      type: string
      format: date-time
      example: 2023-01-06T07:51:36Z
    CredentialSchema:
      type: object
      properties:
        id: 
          type: string
          example: https://raw.githubusercontent.com/hesusruiz/dsbamvf/main/schemas/PacketDeliveryService/2022-10/schema.json
        type:
          type: string
          example: FullJsonSchemaValidator2021
    Proof:
      type: object
      properties:
        type:
          type: string
          example: JsonWebSignature2020
        creator: 
          type: string
          format: did
          example: did:key:z6Mks9m9ifLwy3JWqH4c57EbBQVS2SpRCjfa79wHb5vWM6vh
        created:
          $ref: '#/components/schemas/Date'
        verificationMethod:
          type: string
          example: did:key:z6Mks9m9ifLwy3JWqH4c57EbBQVS2SpRCjfa79wHb5vWM6vh#z6Mks9m9ifLwy3JWqH4c57EbBQVS2SpRCjfa79wHb5vWM6vh
        jws:
          type: string
          example: eyJiNjQiOmZhbHNlLCJjcml0IjpbImI2NCJdLCJhbGciOiJFZERTQSJ9..6xSqoZja0NwjF0af9Zknqx3Cbh9GENunBf9C8uL2ulGfwus3UFM_ZnhPjWtHPl-72E9p3BT5f2ptZoYktMKpDA
    SubjectRole:
      type: object
      properties:
        names:
          type: array
          items: 
            type: string
          example:
            - GOLD_CUSTOMER
            - STANDARD_CUSTOMER
        target:
          type: string
          example: did:key:mytarget
    PacketDeliverySubject:
      type: object
      properties:
        id:
          type: string
          format: did
          example: did:key:z6Mkfdio1n9SKoZUtKdr9GTCZsRPbwHN8f7rbJghJRGdCt88
        familyName:
          type: string
          example: Mustermann
        firstName:
          type: string
          example: Max
        roles:
          type: array
          items:
            $ref: '#/components/schemas/SubjectRole'
        email:
          type: string
          format: email
          example: max@mustermann.org
    VerifiableCredential:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/CredentialsType'
        '@context':
          type: array
          items:
            type: string
            format: uri
          example:
            - https://www.w3.org/2018/credentials/v1
            - https://w3id.org/security/suites/jws-2020/v1
        id:
          type: string
          example: urn:uuid:274e7465-cc9d-4cad-b75f-190db927e56a
        issuer:
          $ref: '#/components/schemas/Did'
        issuanceDate:
          $ref: '#/components/schemas/Date'
        issued:
          $ref: '#/components/schemas/Date'
        validFrom:
          $ref: '#/components/schemas/Date'
        credentialSchema:
          $ref: '#/components/schemas/CredentialSchema'
        credentialsSubject:
          $ref: '#/components/schemas/PacketDeliverySubject'
        proof:
          $ref: '#/components/schemas/Proof'
    VCContainer:
      type: object
      properties:
        credential:
          $ref: '#/components/schemas/VerifiableCredential'
    BackendInfo:
      type: object
      properties:
        issuerDid:
          $ref: '#/components/schemas/Did'
        verifierDid:
          $ref: '#/components/schemas/Did'
    JWK:
      type: object
      properties:
        kid:
          type: string
          example: 179d7b56-6598-4045-9a32-4635e8b0f605
        kty:
          type: string
          example: EC
        use:
          type: string
          example: sig
        alg:
          type: string
          example: ES256
        crv:
          type: string
          example: P-256
        x:
          type: string
          example: 3ctHY_0KJW5ezT-oF39t3wPX6XlggWKOSPFW8iooBXk
        y:
          type: string
          example: HXA4mBHgObIE56E92yxN5bYQ27wSxlVPfuNWaY06TTI
        n:
          type: string
        e:
          type: string
        d:
          type: string
    JWKSet:
      type: object
      properties: 
        keys: 
         type: array
         items:
          $ref: '#/components/schemas/JWK'