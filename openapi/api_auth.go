/*
 * Authorisation API
 *
 * The subset of the [Authentication API as defined by EBSI](https://api-pilot.ebsi.eu/docs/apis/authorisation/latest#/).
 *
 * API version: v4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package openapi

import (
	"encoding/base64"
	"encoding/json"
	"net/http"
	"strings"

	"github.com/fiware/VCVerifier/logging"
	"github.com/gin-gonic/gin"
)

var ErrorMessageUnableToDecodeBody = ProblemDetails{Title: "Code not decode body.", Status: 400}

func GetTokenM2M(c *gin.Context) {
	var requestBody TokenRequestBody
	if err := c.BindJSON(&requestBody); err != nil {
		logging.Log().Error("Could not map request body", err)
		c.AbortWithStatusJSON(400, ErrorMessageUnableToDecodeBody)
		return
	}
	bytes, err := base64.RawURLEncoding.DecodeString(requestBody.VpToken)
	if err != nil {
		logging.Log().Infof("Was not able to decode the form string %s. Err: %v", requestBody.VpToken, err)
		c.AbortWithStatusJSON(400, ErrorMessageUnableToDecodeToken)
		return
	}
	var rawCredentials []map[string]interface{}

	err = json.Unmarshal(bytes, &rawCredentials)
	if err != nil {
		logging.Log().Infof("Was not able to decode the credentials from the token %s. Err: %v", requestBody.VpToken, err)
		c.AbortWithStatusJSON(400, ErrorMessageUnableToDecodeCredential)
		return
	}
	clientId := c.GetHeader("client_id")

	scopes := strings.Split(requestBody.Scope, ",")

	// Subject is empty since multiple VCs with different subjects can be provided
	expiration, signedToken, err := getApiVerifier().GenerateToken(clientId, "", clientId, scopes, rawCredentials)
	if err != nil {
		logging.Log().Error("Failure during generating M2M token", err)
		c.AbortWithStatusJSON(400, err)
		return
	}
	response := TokenResponse{"Bearer", float32(expiration), signedToken, requestBody.Scope, ""}
	logging.Log().Infof("Generated and signed token: %v", response)
	c.JSON(http.StatusOK, response)
}
